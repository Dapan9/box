//
// Decompiled by Jadx (from NP Manager)
//
package com.github.catvod.spider;

import android.content.Context;
import android.text.TextUtils;
import android.util.Base64;
import com.github.catvod.crawler.Spider;
import com.github.catvod.spider.merge.DM.b.f;
import com.github.catvod.spider.merge.DM.b.i;
import com.github.catvod.spider.merge.DM.k.c;
import com.github.catvod.spider.merge.DM.m.a;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import okhttp3.MediaType;
import okhttp3.Request.Builder;
import okhttp3.RequestBody;
import org.json.JSONArray;
import org.json.JSONObject;

public class AppGet extends Spider {
    private static Map<String, Boolean> f = new HashMap();
    private String a;
    private String b;
    private String c;
    private String d;
    private String e;

    public String playerContent(String str, String str2, List<String> list) {
        try {
            String[] split = str2.split("\\|");
            str2 = split[0];
            String str3 = split[1];
            str = split[2];
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(Proxy.getUrl());
            stringBuilder.append("?do=appdanmu&vodName=");
            stringBuilder.append(str3);
            stringBuilder.append("&vodIndex=");
            stringBuilder.append(str);
            stringBuilder.append("&vodUrl=");
            str = stringBuilder.toString();
            Map b = b();
            ((HashMap) b).put("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36");
            String str4 = "url";
            String str5 = "?key=";
            String str6 = "?url=";
            f fVar;
            if (str2.matches("^https?://.*") && (str2.contains(str6) || str2.contains(str5))) {
                str2 = new JSONObject(c.l(str2, b())).optString(str4);
                fVar = new f();
                fVar.w(str2);
                fVar.a(str);
                fVar.e(b);
                return fVar.toString();
            } else if (str2.matches(".*(m3u8|mp4|mkv).*")) {
                f fVar2 = new f();
                fVar2.w(str2);
                fVar2.a(str);
                fVar2.e(b());
                return fVar2.toString();
            } else {
                if (str2.contains(str6) || str2.contains(str5) || str2.contains("html")) {
                    str2 = eduAesDecode(str2);
                    Matcher matcher = Pattern.compile("(parse_api=)(.*?)(?=&token)(&token)").matcher(str2);
                    if (matcher.find()) {
                        str2 = new JSONObject(c.l(matcher.group(2), null)).optJSONObject("data").optString(str4);
                        if (str2.isEmpty()) {
                            str2 = c.c(str2, b());
                            fVar = new f();
                            fVar.w(str2);
                            fVar.a(str);
                            fVar.e(b);
                            return fVar.toString();
                        }
                        fVar = new f();
                        fVar.w(str2);
                        fVar.a(str);
                        fVar.e(b);
                        return fVar.toString();
                    }
                }
                str2 = c(edu(str2));
                if (str2.isEmpty()) {
                    str2 = c.c(str2, b());
                    fVar = new f();
                    fVar.w(str2);
                    fVar.a(str);
                    fVar.e(b);
                    return fVar.toString();
                }
                fVar = new f();
                fVar.w(str2);
                fVar.a(str);
                fVar.e(b);
                return fVar.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public void init(Context context, String str) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            this.a = jSONObject.getString("url");
            this.b = jSONObject.getString("dataKey");
            this.c = jSONObject.getString("dataIv");
            this.d = jSONObject.getString("deviceId");
            this.e = jSONObject.getString("version");
            f = Init.getKeywordsMap();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static {
        Pattern.compile("data=([^&]*)");
    }

    private String a(String str, String str2) {
        try {
            String valueOf = String.valueOf(System.currentTimeMillis() / 1000);
            Map b = b();
            HashMap hashMap = (HashMap) b;
            hashMap.put("Content-Type", "application/x-www-form-urlencoded");
            hashMap.put("app-user-device-id", this.d);
            hashMap.put("app-version-code", this.e);
            hashMap.put("app-api-verify-time", valueOf);
            hashMap.put("app-ui-mode", "light");
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.a);
            stringBuilder.append("/api.php");
            stringBuilder.append(str);
            return a.b(new JSONObject(c.g(stringBuilder.toString(), str2, b).a()).getString("data"), this.b, this.c);
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    private Map<String, String> b() {
        HashMap hashMap = new HashMap();
        hashMap.put("User-Agent", "okhttp/3.14.9");
        return hashMap;
    }

    private String c(String str) {
        String str2 = "application/x-www-form-urlencoded";
        try {
            String valueOf = String.valueOf(System.currentTimeMillis() / 1000);
            String encodeToString = Base64.encodeToString(a.i(valueOf, this.b, this.c), 2);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.a);
            stringBuilder.append("/api.php/getappapi.index/vodParse");
            String stringBuilder2 = stringBuilder.toString();
            return new JSONObject((String) ((Map) new Gson().fromJson(a.b(new JSONObject(c.a().newCall(new Builder().url(stringBuilder2).method("POST", RequestBody.create(MediaType.parse(str2), str)).addHeader("User-Agent", "okhttp/3.14.9").addHeader("Connection", "Keep-Alive").addHeader("Content-Type", str2).addHeader("app-version-code", this.e).addHeader("app-ui-mode", "light").addHeader("app-user-device-id", this.d).addHeader("app-api-verify-time", valueOf).addHeader("app-api-verify-sign", encodeToString).build()).execute().body().string()).getString("data"), this.b, this.c), Map.class)).get("json")).getString("url");
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public String categoryContent(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        List arrayList = new ArrayList();
        try {
            JsonObject jsonObject = new JsonObject();
            jsonObject.addProperty("type_id", str);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("/getappapi.index/typeFilterVodList?page=");
            stringBuilder.append(str2);
            arrayList = parseVodList(new JSONObject(a(stringBuilder.toString(), jsonObject.toString())).optJSONArray("recommend_list"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return f.p(arrayList);
    }

    public String detailContent(List<String> list) {
        Throwable e;
        i iVar;
        List<String> list2 = list;
        String str = "player_info";
        String str2 = "$$$";
        String str3 = "vod_name";
        i iVar2 = new i();
        try {
            String str4;
            ArrayList arrayList;
            JsonObject jsonObject = new JsonObject();
            jsonObject.addProperty("vod_id", (String) list2.get(0));
            JSONObject jSONObject = new JSONObject(a("/getappapi.index/vodDetail", jsonObject.toString()));
            JSONObject optJSONObject = jSONObject.optJSONObject("vod");
            iVar2.g((String) list2.get(0));
            iVar2.h(optJSONObject.optString(str3));
            iVar2.i(optJSONObject.optString("vod_pic"));
            iVar2.l(optJSONObject.optString("vod_remarks"));
            iVar2.e(optJSONObject.optString("vod_content"));
            iVar2.c(optJSONObject.optString("vod_actor"));
            iVar2.f(optJSONObject.optString("vod_director"));
            iVar2.b(optJSONObject.optString("vod_class"));
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            JSONArray optJSONArray = jSONObject.optJSONArray("vod_play_list");
            optJSONArray.length();
            int i = 0;
            while (i < optJSONArray.length()) {
                String str5;
                JSONArray jSONArray;
                i iVar3;
                String str6;
                int i2;
                ArrayList arrayList4;
                JSONObject optJSONObject2 = optJSONArray.optJSONObject(i);
                String optString = optJSONObject2.optJSONObject(str).optString("show");
                String optString2 = optJSONObject2.optJSONObject(str).optString("parse");
                JSONArray optJSONArray2 = optJSONObject2.optJSONArray("urls");
                ArrayList arrayList5 = new ArrayList();
                int i3 = 0;
                while (i3 < optJSONArray2.length()) {
                    JSONObject optJSONObject3 = optJSONArray2.optJSONObject(i3);
                    str5 = str;
                    str = optJSONObject3.optString("url");
                    jSONArray = optJSONArray;
                    String optString3 = optJSONObject3.optString("parse_api_url");
                    JSONArray jSONArray2 = optJSONArray2;
                    String optString4 = optJSONObject3.optString("token");
                    iVar3 = iVar2;
                    try {
                        Object stringBuilder;
                        String optString5 = optJSONObject3.optString("name");
                        str6 = str2;
                        i2 = i;
                        String str7 = "nid";
                        arrayList4 = arrayList2;
                        str4 = "|";
                        if (optString3.matches("^https?://.*")) {
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append(optString5);
                            stringBuilder2.append("$");
                            stringBuilder2.append(optString3);
                            stringBuilder2.append(str4);
                            stringBuilder2.append(optJSONObject.optString(str3));
                            stringBuilder2.append(str4);
                            stringBuilder2.append(optJSONObject3.optString(str7));
                            stringBuilder = stringBuilder2.toString();
                        } else {
                            str = Base64.encodeToString(a.i(str, this.b, this.c), 2);
                            StringBuilder stringBuilder3 = new StringBuilder();
                            stringBuilder3.append(optString5);
                            stringBuilder3.append("$parse_api=");
                            stringBuilder3.append(optString2);
                            stringBuilder3.append("&url=");
                            stringBuilder3.append(str);
                            stringBuilder3.append("&token=");
                            stringBuilder3.append(optString4);
                            stringBuilder3.append(str4);
                            stringBuilder3.append(optJSONObject.optString(str3));
                            stringBuilder3.append(str4);
                            stringBuilder3.append(optJSONObject3.optString(str7));
                            stringBuilder = stringBuilder3.toString();
                        }
                        arrayList5.add(stringBuilder);
                        i3++;
                        optJSONArray = jSONArray;
                        str = str5;
                        optJSONArray2 = jSONArray2;
                        iVar2 = iVar3;
                        str2 = str6;
                        i = i2;
                        arrayList2 = arrayList4;
                    } catch (Exception e2) {
                        e = e2;
                        iVar = iVar3;
                        e.printStackTrace();
                        return f.n(iVar);
                    }
                }
                arrayList4 = arrayList2;
                str5 = str;
                str6 = str2;
                iVar3 = iVar2;
                jSONArray = optJSONArray;
                i2 = i;
                arrayList3.add(optString);
                arrayList = arrayList4;
                arrayList.add(TextUtils.join("#", arrayList5));
                i = i2 + 1;
                optJSONArray = jSONArray;
                arrayList2 = arrayList;
                str = str5;
                iVar2 = iVar3;
                str2 = str6;
            }
            arrayList = arrayList2;
            str4 = str2;
            iVar = iVar2;
            try {
                iVar.j(TextUtils.join(str4, arrayList3));
                iVar.k(TextUtils.join(str4, arrayList));
            } catch (Exception e3) {
                e = e3;
            }
        } catch (Exception e4) {
            e = e4;
            iVar = iVar2;
            e.printStackTrace();
            return f.n(iVar);
        }
        return f.n(iVar);
    }

    public String edu(String str) {
        Matcher matcher = Pattern.compile("(url=)(.*?)(?=&token)(&token)").matcher(str);
        StringBuffer stringBuffer = new StringBuffer();
        while (matcher.find()) {
            try {
                String encode = URLEncoder.encode(matcher.group(2), "UTF-8");
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(matcher.group(1));
                stringBuilder.append(encode);
                stringBuilder.append(matcher.group(3));
                matcher.appendReplacement(stringBuffer, stringBuilder.toString());
            } catch (Exception e) {
                e.printStackTrace();
                return str;
            }
        }
        matcher.appendTail(stringBuffer);
        return stringBuffer.toString();
    }

    public String eduAesDecode(String str) {
        Matcher matcher = Pattern.compile("(&url=)(.*?)(?=&token)(&token)").matcher(str);
        StringBuffer stringBuffer = new StringBuffer();
        while (matcher.find()) {
            try {
                String b = a.b(matcher.group(2), this.b, this.c);
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(matcher.group(1));
                stringBuilder.append(b);
                stringBuilder.append(matcher.group(3));
                matcher.appendReplacement(stringBuffer, stringBuilder.toString());
            } catch (Exception e) {
                e.printStackTrace();
                return str;
            }
        }
        matcher.appendTail(stringBuffer);
        return stringBuffer.toString();
    }

    public String homeContent(boolean z) {
        ArrayList arrayList = new ArrayList();
        List arrayList2 = new ArrayList();
        try {
            JSONObject jSONObject = new JSONObject(a("/getappapi.index/initV119", new JsonObject().toString()));
            JSONArray optJSONArray = jSONObject.optJSONArray("recommend_list");
            JSONArray optJSONArray2 = jSONObject.optJSONArray("type_list");
            int i = 0;
            while (true) {
                optJSONArray2.getClass();
                if (i >= optJSONArray2.length()) {
                    break;
                }
                arrayList.add(new com.github.catvod.spider.merge.DM.b.a(optJSONArray2.getJSONObject(i).getString("type_id"), optJSONArray2.getJSONObject(i).getString("type_name")));
                i++;
            }
            arrayList2 = parseVodList(optJSONArray);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return f.r(arrayList, arrayList2);
    }

    public List<i> parseVodList(JSONArray jSONArray) {
        ArrayList arrayList = new ArrayList();
        int i = 0;
        while (true) {
            try {
                jSONArray.getClass();
                if (i >= jSONArray.length()) {
                    break;
                }
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                String optString = jSONObject.optString("vod_name");
                if (f.isEmpty() || !f.containsKey(optString)) {
                    arrayList.add(new i(jSONObject.optString("vod_id"), optString, jSONObject.optString("vod_pic"), jSONObject.optString("vod_remarks")));
                }
                i++;
            } catch (Exception unused) {
            }
        }
        return arrayList;
    }

    public String searchContent(String str, boolean z) {
        List arrayList = new ArrayList();
        try {
            JsonObject jsonObject = new JsonObject();
            jsonObject.addProperty("type_id", Integer.valueOf(0));
            jsonObject.addProperty("keywords", str);
            jsonObject.addProperty("page", Integer.valueOf(1));
            arrayList = parseVodList(new JSONObject(a("/getappapi.index/searchList", jsonObject.toString())).optJSONArray("search_list"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return f.p(arrayList);
    }
}